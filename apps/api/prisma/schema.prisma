generator client {
  provider = "prisma-client-js"
}

model VendorDocument {
  id            String   @id @default(cuid())
  applicationId String?
  userId        String
  storageKey    String
  originalName  String
  mimeType      String
  sizeBytes     Int
  uploadedAt    DateTime @default(now())

  application   VendorApplication? @relation(fields: [applicationId], references: [id])
  user          User               @relation(fields: [userId], references: [id])

  @@index([applicationId])
  @@index([userId])
}

model VendorApplication {
  id             String                    @id @default(cuid())
  userId         String
  status         VendorApplicationStatus   @default(PENDING)
  legalName      String
  country        String
  address        String?
  contactPhone   String?
  submittedAt    DateTime                  @default(now())
  reviewedAt     DateTime?
  reviewedById   String?
  notes          String?                   @db.Text
  rejectionReason String?                  @db.Text
  identityVerificationStatus IdentityVerificationStatus @default(NOT_REQUIRED)
  identityVerificationProvider String?
  identityVerificationId      String?
  identityVerificationCheckedAt DateTime?
  identityVerificationNotes   String?                   @db.Text
  securityDepositRequired     Boolean                   @default(false)
  securityDepositStatus       SecurityDepositStatus     @default(NOT_REQUIRED)
  securityDepositAmountCents  Int?
  securityDepositCurrency     String?
  securityDepositPaidAt       DateTime?
  securityDepositPaymentIntentId String?

  user          User                      @relation(fields: [userId], references: [id])
  reviewedBy    User?                     @relation("VendorApplicationReviewedBy", fields: [reviewedById], references: [id])
  vendorDocuments VendorDocument[]

  @@index([userId, status])
  @@index([status, submittedAt])
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  rating     Int
  title      String?
  body       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}

model DiscountCode {
  id             String   @id @default(cuid())
  shopId         String
  code           String   @unique
  description    String?
  percentOff     Int
  expiresAt      DateTime?
  maxUsesPerUser Int      @default(1)
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  shop        Shop                      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  orders      Order[]
  redemptions DiscountCodeRedemption[]

  @@index([shopId])
}

model DiscountCodeRedemption {
  id             String   @id @default(cuid())
  discountCodeId String
  userId         String
  orderId        String?
  redeemedAt     DateTime @default(now())

  discountCode DiscountCode @relation(fields: [discountCodeId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
  order        Order?       @relation(fields: [orderId], references: [id])

  @@index([discountCodeId, userId])
  @@index([userId])
  @@index([orderId])
}

model Conversation {
  id            String   @id @default(cuid())
  shopId        String
  productId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastMessageAt DateTime @default(now())

  shop          Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  product       Product? @relation(fields: [productId], references: [id])
  participants  ConversationParticipant[]
  messages      Message[]

  @@index([shopId, lastMessageAt])
  @@index([productId])
}

model ConversationParticipant {
  conversationId String
  userId         String
  role           ChatParticipantRole
  lastReadAt     DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  body           String   @db.Text
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id])

  @@index([conversationId, createdAt])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum UserRole {
  BUYER
  VENDOR
  ADMIN
}

enum ShopStatus {
  PENDING_APPROVAL
  ACTIVE
  SUSPENDED
  CLOSED
}

enum VendorApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum IdentityVerificationStatus {
  NOT_REQUIRED
  PENDING
  VERIFIED
  FAILED
}

enum SecurityDepositStatus {
  NOT_REQUIRED
  PENDING
  PAID
  REFUNDED
  WAIVED
}

model PhoneVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([expiresAt])
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SUSPENDED
}

enum OrderStatus {
  PENDING_PAYMENT
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  TRANSFERRED
  FAILED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

enum ChatParticipantRole {
  CUSTOMER
  VENDOR
}

// MODELS

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  name          String?
  role          UserRole  @default(BUYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  isDisabled    Boolean   @default(false)
  emailVerifiedAt DateTime?
  phoneNumber     String?
  phoneVerifiedAt DateTime?

  phoneVerificationTokens PhoneVerificationToken[]

  shop          Shop?
  orders        Order[]   @relation("BuyerOrders")
  addresses     Address[]
  auditLogs     AdminAuditLog[] @relation(name: "AdminActor")
  blogPosts     BlogPost[]
  reviews       Review[]
  discountRedemptions DiscountCodeRedemption[]
  vendorApplications   VendorApplication[]
  reviewedVendorApplications VendorApplication[] @relation("VendorApplicationReviewedBy")
  vendorDocuments VendorDocument[]

  // Chat relations
  conversationParticipants ConversationParticipant[]
  messages                 Message[]

  @@index([name])
}

model Shop {
  id            String     @id @default(cuid())
  ownerId       String     @unique
  name          String
  slug          String     @unique
  description   String?    @db.Text
  status        ShopStatus @default(PENDING_APPROVAL)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Optional cover fields
  coverUrl              String?
  coverImageStorageKey  String?

  // Stripe Connect metadata
  stripeAccountId        String?
  stripeDetailsSubmitted Boolean   @default(false)
  stripeChargesEnabled   Boolean   @default(false)
  stripePayoutsEnabled   Boolean   @default(false)
  stripeOnboardedAt      DateTime?
  stripeDefaultCurrency  String?

  owner         User       @relation(fields: [ownerId], references: [id])
  products      Product[]
  orders        Order[]
  payouts       Payout[]

  blogPosts     BlogPost[]

  // Chat relations
  conversations Conversation[]

  discountCodes DiscountCode[]

  @@index([status])
}

model Product {
  id                String        @id @default(cuid())
  shopId            String
  title             String
  slug              String
  description       String        @db.Text
  priceCents        Int
  currency          String        @default("EUR")
  sku               String?
  stock             Int           @default(0)
  status            ProductStatus @default(DRAFT)
  discountPercent   Int?          @default(0)
  originalPriceCents Int?
  isOnSale          Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  shop         Shop              @relation(fields: [shopId], references: [id], onDelete: Cascade)
  variants     ProductVariant[]
  images       ProductImage[]
  categories   ProductCategory[]
  orderItems   OrderItem[]

  // Chat relations
  conversations Conversation[]
  reviews       Review[]

  @@unique([shopId, slug])
  @@index([status, createdAt])
  // Speed up vendor lists and counts per shop by status/createdAt/stock
  @@index([shopId, status, createdAt])
  @@index([shopId, stock])
  @@index([shopId, createdAt])
  // Basic index for title searches (note: for contains queries consider pg_trgm GIN in a future migration)
  @@index([title])
  @@index([isOnSale])
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  attributes  Json
  priceCents  Int
  stock       Int
  sku         String?

  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@unique([productId, sku])
}

model ProductImage {
  id         String   @id @default(cuid())
  productId  String
  storageKey String
  altText    String?
  position   Int      @default(0)

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  parentId  String?

  parent       Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]        @relation("CategoryHierarchy")
  products     ProductCategory[]
}

model ProductCategory {
  productId   String
  categoryId  String

  product     Product   @relation(fields: [productId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Order {
  id               String        @id @default(cuid())
  buyerId          String
  shopId           String
  status           OrderStatus   @default(PENDING_PAYMENT)
  totalCents       Int
  discountCents    Int           @default(0)
  currency         String        @default("EUR")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  confirmationNotifiedAt DateTime?
  shippedNotifiedAt      DateTime?
  shippingAddressId String?
  billingAddressId  String?
  discountCodeId    String?

  buyer            User          @relation("BuyerOrders", fields: [buyerId], references: [id])
  shop             Shop          @relation(fields: [shopId], references: [id])
  items            OrderItem[]
  payments        Payment[]
  shippingAddress Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  discountCode    DiscountCode?            @relation(fields: [discountCodeId], references: [id])
  discountUsages  DiscountCodeRedemption[]
  @@index([buyerId, createdAt])
  @@index([shopId, createdAt])
  // Speed up status-based lookups and listings
  @@index([shopId, status, createdAt])
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  variantId   String?
  priceCents  Int
  quantity    Int

  order       Order           @relation(fields: [orderId], references: [id])
  product     Product         @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([orderId])
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  street       String
  city         String
  postalCode   String
  country      String
  isDefault    Boolean @default(false)

  user         User    @relation(fields: [userId], references: [id])
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}

model Payment {
  id                String   @id @default(cuid())
  orderId           String
  provider          String
  providerPaymentIntentId String   @unique @map("providerPaymentId")
  providerChargeId        String?
  providerTransferId      String?
  transferGroup           String?
  status                  PaymentStatus @default(PENDING)
  amountCents             Int
  applicationFeeCents     Int      @default(0)
  transferAmountCents     Int      @default(0)
  netAmountCents          Int      @default(0)
  currency                String   @default("eur")
  clientSecret            String?
  rawPayload              Json?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  order             Order    @relation(fields: [orderId], references: [id])

  @@index([providerPaymentIntentId])
  @@index([providerTransferId])
}

model Payout {
  id            String   @id @default(cuid())
  shopId        String
  amountCents   Int
  status        String
  initiatedAt   DateTime @default(now())
  completedAt   DateTime?

  shop          Shop     @relation(fields: [shopId], references: [id])
}

model AdminAuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  meta      Json?
  createdAt DateTime @default(now())

  actor     User     @relation(name: "AdminActor", fields: [actorId], references: [id])
}

model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?     @db.Text
  content     String      @db.Text
  coverImageStorageKey String?
  status      BlogStatus  @default(DRAFT)
  tags        String[]
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  authorId    String
  shopId      String?

  author      User        @relation(fields: [authorId], references: [id])
  shop        Shop?       @relation(fields: [shopId], references: [id])

  @@index([status, publishedAt])
  @@index([authorId, createdAt])
  @@index([shopId, createdAt])
}
